{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\Benford's_Law\\\\Benford-s-Law\\\\src\\\\App.js\",\n  _s2 = $RefreshSig$();\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"./DnD.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport Papa from \"papaparse\";\nimport Histogram from \"./components/Histogram\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s2();\n  var _s = $RefreshSig$();\n  function readExcelData(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = event => {\n        const data = event.target.result;\n        const workbook = XLSX.read(data, {\n          type: \"binary\"\n        });\n        const firstSheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[firstSheetName];\n        const csvData = XLSX.utils.sheet_to_csv(worksheet);\n        Papa.parse(csvData, {\n          complete: results => resolve(results.data),\n          error: error => reject(error)\n        });\n      };\n      reader.onerror = error => reject(error);\n      reader.readAsBinaryString(file);\n    });\n  }\n  const Logo = () => /*#__PURE__*/_jsxDEV(\"svg\", {\n    className: \"icon\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 24 24\",\n    children: [/*#__PURE__*/_jsxDEV(\"path\", {\n      fill: \"transparent\",\n      d: \"M0,0h24v24H0V0z\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n      fill: \"#000\",\n      d: \"M20.5,5.2l-1.4-1.7C18.9,3.2,18.5,3,18,3H6C5.5,3,5.1,3.2,4.8,3.5L3.5,5.2C3.2,5.6,3,6,3,6.5V19  c0,1.1,0.9,2,2,2h14c1.1,0,2-0.9,2-2V6.5C21,6,20.8,5.6,20.5,5.2z M12,17.5L6.5,12H10v-2h4v2h3.5L12,17.5z M5.1,5l0.8-1h12l0.9,1  H5.1z\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 7\n  }, this);\n  const UploadBox = () => {\n    _s();\n    const [uploadedInfo, setUploadedInfo] = useState(null);\n\n    // ...생략\n\n    const setFileInfo = file => {\n      const {\n        name,\n        size: byteSize,\n        type\n      } = file;\n      const size = (byteSize / (1024 * 1024)).toFixed(2) + 'mb';\n      setUploadedInfo({\n        name,\n        size,\n        type\n      }); // name, size, type 정보를 uploadedInfo에 저장\n    };\n\n    const handleDrop = event => {\n      event.preventDefault();\n      setActive(false);\n      const file = event.dataTransfer.files[0];\n      setFileInfo(file); // 코드 추가\n    };\n\n    const handleUpload = ({\n      target\n    }) => {\n      const file = target.files[0];\n      setFileInfo(file); // 코드 추가\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"label\", {\n      className: `preview${isActive ? ' active' : ''}`,\n      onDragEnter: handleDragStart,\n      onDragOver: handleDragOver,\n      onDragLeave: handleDragEnd,\n      onDrop: handleDrop,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        className: \"file\",\n        onChange: handleUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), \"  // change \\uD578\\uB4E4\\uB7EC \\uCD94\\uAC00\", uploadedInfo && /*#__PURE__*/_jsxDEV(FileInfo, {\n        ...uploadedInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 28\n      }, this), \"  // uploadedInfo \\uAC12 \\uC720\\uBB34\\uC5D0 \\uB530\\uB978 \\uBD84\\uAE30\", !uploadedInfo && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"preview_msg\",\n          children: \"\\uD074\\uB9AD \\uD639\\uC740 \\uD30C\\uC77C\\uC744 \\uC774\\uACF3\\uC5D0 \\uB4DC\\uB86D\\uD558\\uC138\\uC694.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"preview_desc\",\n          children: \"\\uD30C\\uC77C\\uB2F9 \\uCD5C\\uB300 3MB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this);\n  };\n  _s(UploadBox, \"PhRylcgn7VxrcVcl3VXEYpiGRaY=\");\n  const [data, setData] = useState([]);\n  function extractNumericData(rawData) {\n    // Filter rows that have numeric data.\n    const numericRows = rawData.slice(4, 19); // Based on the given data, adjust if necessary\n\n    let numbers = [];\n    for (const row of numericRows) {\n      // For each row, filter only the numeric values\n      const numericValues = row.filter(cell => !isNaN(cell) && cell !== \"\");\n      numbers = numbers.concat(numericValues.map(val => parseFloat(val)));\n    }\n    return numbers;\n  }\n  const handleFileUpload = async event => {\n    const file = event.target.files[0];\n    if (file) {\n      const rawData = await readExcelData(file);\n      const numericData = extractNumericData(rawData);\n      setData(numericData);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(UploadBox, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Histogram, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"hhQqYsxLIv1exGOzUvDGOVv6fXw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","React","useState","useEffect","useRef","XLSX","Papa","Histogram","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s2","_s","$RefreshSig$","readExcelData","file","Promise","resolve","reject","reader","FileReader","onload","event","data","target","result","workbook","read","type","firstSheetName","SheetNames","worksheet","Sheets","csvData","utils","sheet_to_csv","parse","complete","results","error","onerror","readAsBinaryString","Logo","className","x","y","viewBox","children","fill","d","fileName","_jsxFileName","lineNumber","columnNumber","UploadBox","uploadedInfo","setUploadedInfo","setFileInfo","name","size","byteSize","toFixed","handleDrop","preventDefault","setActive","dataTransfer","files","handleUpload","isActive","onDragEnter","handleDragStart","onDragOver","handleDragOver","onDragLeave","handleDragEnd","onDrop","onChange","FileInfo","setData","extractNumericData","rawData","numericRows","slice","numbers","row","numericValues","filter","cell","isNaN","concat","map","val","parseFloat","handleFileUpload","numericData","_c","$RefreshReg$"],"sources":["E:/Projects/Benford's_Law/Benford-s-Law/src/App.js"],"sourcesContent":["import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport \"./DnD.css\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\nimport Papa from \"papaparse\";\r\nimport Histogram from \"./components/Histogram\";\r\n\r\n\r\nfunction App() {\r\n  function readExcelData(file) {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = (event) => {\r\n        const data = event.target.result;\r\n        const workbook = XLSX.read(data, { type: \"binary\" });\r\n        const firstSheetName = workbook.SheetNames[0];\r\n        const worksheet = workbook.Sheets[firstSheetName];\r\n        const csvData = XLSX.utils.sheet_to_csv(worksheet);\r\n\r\n        Papa.parse(csvData, {\r\n          complete: (results) => resolve(results.data),\r\n          error: (error) => reject(error),\r\n        });\r\n      };\r\n      reader.onerror = (error) => reject(error);\r\n      reader.readAsBinaryString(file);\r\n    });\r\n  }\r\n  const Logo = () => (\r\n      <svg className=\"icon\" x=\"0px\" y=\"0px\" viewBox=\"0 0 24 24\">\r\n        <path fill=\"transparent\" d=\"M0,0h24v24H0V0z\" />\r\n        <path\r\n            fill=\"#000\"\r\n            d=\"M20.5,5.2l-1.4-1.7C18.9,3.2,18.5,3,18,3H6C5.5,3,5.1,3.2,4.8,3.5L3.5,5.2C3.2,5.6,3,6,3,6.5V19  c0,1.1,0.9,2,2,2h14c1.1,0,2-0.9,2-2V6.5C21,6,20.8,5.6,20.5,5.2z M12,17.5L6.5,12H10v-2h4v2h3.5L12,17.5z M5.1,5l0.8-1h12l0.9,1  H5.1z\"\r\n        />\r\n      </svg>\r\n  );\r\n  const UploadBox = () => {\r\n    const [uploadedInfo, setUploadedInfo] = useState(null);\r\n\r\n    // ...생략\r\n\r\n    const setFileInfo = (file) => {\r\n      const { name, size: byteSize, type } = file;\r\n      const size = (byteSize / (1024 * 1024)).toFixed(2) + 'mb';\r\n      setUploadedInfo({ name, size, type });  // name, size, type 정보를 uploadedInfo에 저장\r\n    };\r\n\r\n    const handleDrop = (event) => {\r\n      event.preventDefault();\r\n      setActive(false);\r\n\r\n      const file = event.dataTransfer.files[0];\r\n      setFileInfo(file);  // 코드 추가\r\n    };\r\n\r\n    const handleUpload = ({ target }) => {\r\n      const file = target.files[0];\r\n      setFileInfo(file);  // 코드 추가\r\n    };\r\n\r\n    return (\r\n        <label\r\n            className={`preview${isActive ? ' active' : ''}`}\r\n            onDragEnter={handleDragStart}\r\n            onDragOver={handleDragOver}\r\n            onDragLeave={handleDragEnd}\r\n            onDrop={handleDrop}\r\n        >\r\n          <input type=\"file\" className=\"file\" onChange={handleUpload} />  // change 핸들러 추가\r\n          {uploadedInfo && <FileInfo {...uploadedInfo} />}  // uploadedInfo 값 유무에 따른 분기\r\n          {!uploadedInfo && (\r\n              <>\r\n                <Logo />\r\n                <p className=\"preview_msg\">클릭 혹은 파일을 이곳에 드롭하세요.</p>\r\n                <p className=\"preview_desc\">파일당 최대 3MB</p>\r\n              </>\r\n          )}\r\n        </label>\r\n    );\r\n  };\r\n\r\n\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  function extractNumericData(rawData) {\r\n    // Filter rows that have numeric data.\r\n    const numericRows = rawData.slice(4, 19); // Based on the given data, adjust if necessary\r\n\r\n    let numbers = [];\r\n\r\n    for (const row of numericRows) {\r\n      // For each row, filter only the numeric values\r\n      const numericValues = row.filter((cell) => !isNaN(cell) && cell !== \"\");\r\n      numbers = numbers.concat(numericValues.map((val) => parseFloat(val)));\r\n    }\r\n\r\n    return numbers;\r\n  }\r\n\r\n  const handleFileUpload = async (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      const rawData = await readExcelData(file);\r\n      const numericData = extractNumericData(rawData);\r\n      setData(numericData);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <UploadBox  />\r\n      <Histogram data={data} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}