{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\Benford's_Law\\\\Benford-s-Law\\\\src\\\\App.js\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport Papa from \"papaparse\";\nimport Histogram from \"./components/Histogram\";\nimport { FileUploader } from \"react-drag-drop-files\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fileTypes = [\"XLSX\"];\nfunction App() {\n  var _s = $RefreshSig$();\n  function DragDrop() {\n    _s();\n    const handleFileUpload = async file => {\n      try {\n        const data = await upload(file);\n        console.log(data); // or do whatever you want with the parsed data\n      } catch (error) {\n        console.error(\"Error reading the file:\", error);\n      }\n    };\n    const upload = file => {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = event => {\n          const data = event.target.result;\n          const workbook = XLSX.read(data, {\n            type: \"binary\"\n          });\n          const firstSheetName = workbook.SheetNames[0];\n          const worksheet = workbook.Sheets[firstSheetName];\n          const csvData = XLSX.utils.sheet_to_csv(worksheet);\n          Papa.parse(csvData, {\n            complete: results => resolve(results.data),\n            error: error => reject(error)\n          });\n        };\n        reader.onerror = error => reject(error);\n        reader.readAsBinaryString(file);\n      });\n    };\n\n    //   return new Promise((resolve, reject) => {\n    //     const reader = new FileReader();\n    //     reader.onload = (event) => {\n    //       const data = event.target.result;\n    //       const workbook = XLSX.read(data, { type: \"binary\" });\n    //       const firstSheetName = workbook.SheetNames[0];\n    //       const worksheet = workbook.Sheets[firstSheetName];\n    //       const csvData = XLSX.utils.sheet_to_csv(worksheet);\n    //\n    //       Papa.parse(csvData, {\n    //         complete: (results) => resolve(results.data),\n    //         error: (error) => reject(error),\n    //       });\n    //     };\n    //     reader.onerror = (error) => reject(error);\n    //     reader.readAsBinaryString(file);\n    //   });\n    // }\n\n    const [data, setData] = useState([]);\n    function extractNumericData(rawData) {\n      // Filter rows that have numeric data.\n      const numericRows = rawData.slice(4, 19); // Based on the given data, adjust if necessary\n\n      let numbers = [];\n      for (const row of numericRows) {\n        // For each row, filter only the numeric values\n        const numericValues = row.filter(cell => !isNaN(cell) && cell !== \"\");\n        numbers = numbers.concat(numericValues.map(val => parseFloat(val)));\n      }\n      return numbers;\n    }\n\n    // const handleFileUpload = async (event) => {\n    //   const file = event.target.files[0];\n    //   if (file) {\n    //     const rawData = await DragDrop(file);\n    //     const numericData = extractNumericData(rawData);\n    //     setData(numericData);\n    //   }\n  }\n  _s(DragDrop, \"hhQqYsxLIv1exGOzUvDGOVv6fXw=\");\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(DragDrop, {\n      type: \"file\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Histogram, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","React","useState","useEffect","useRef","XLSX","Papa","Histogram","FileUploader","jsxDEV","_jsxDEV","fileTypes","App","_s","$RefreshSig$","DragDrop","handleFileUpload","file","data","upload","console","log","error","Promise","resolve","reject","reader","FileReader","onload","event","target","result","workbook","read","type","firstSheetName","SheetNames","worksheet","Sheets","csvData","utils","sheet_to_csv","parse","complete","results","onerror","readAsBinaryString","setData","extractNumericData","rawData","numericRows","slice","numbers","row","numericValues","filter","cell","isNaN","concat","map","val","parseFloat","className","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Projects/Benford's_Law/Benford-s-Law/src/App.js"],"sourcesContent":["import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\nimport Papa from \"papaparse\";\r\nimport Histogram from \"./components/Histogram\";\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\nconst fileTypes = [\"XLSX\"];\r\nfunction App() {\r\n  function DragDrop() {\r\n    const handleFileUpload = async (file) => {\r\n      try {\r\n        const data = await upload(file);\r\n        console.log(data); // or do whatever you want with the parsed data\r\n      } catch (error) {\r\n        console.error(\"Error reading the file:\", error);\r\n      }\r\n    }\r\n\r\n    const upload = (file) => {\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onload = (event) => {\r\n          const data = event.target.result;\r\n          const workbook = XLSX.read(data, { type: \"binary\" });\r\n          const firstSheetName = workbook.SheetNames[0];\r\n          const worksheet = workbook.Sheets[firstSheetName];\r\n          const csvData = XLSX.utils.sheet_to_csv(worksheet);\r\n\r\n          Papa.parse(csvData, {\r\n            complete: (results) => resolve(results.data),\r\n            error: (error) => reject(error),\r\n          });\r\n        };\r\n        reader.onerror = (error) => reject(error);\r\n        reader.readAsBinaryString(file);\r\n      });\r\n    }\r\n\r\n  //   return new Promise((resolve, reject) => {\r\n  //     const reader = new FileReader();\r\n  //     reader.onload = (event) => {\r\n  //       const data = event.target.result;\r\n  //       const workbook = XLSX.read(data, { type: \"binary\" });\r\n  //       const firstSheetName = workbook.SheetNames[0];\r\n  //       const worksheet = workbook.Sheets[firstSheetName];\r\n  //       const csvData = XLSX.utils.sheet_to_csv(worksheet);\r\n  //\r\n  //       Papa.parse(csvData, {\r\n  //         complete: (results) => resolve(results.data),\r\n  //         error: (error) => reject(error),\r\n  //       });\r\n  //     };\r\n  //     reader.onerror = (error) => reject(error);\r\n  //     reader.readAsBinaryString(file);\r\n  //   });\r\n  // }\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  function extractNumericData(rawData) {\r\n    // Filter rows that have numeric data.\r\n    const numericRows = rawData.slice(4, 19); // Based on the given data, adjust if necessary\r\n\r\n    let numbers = [];\r\n\r\n    for (const row of numericRows) {\r\n      // For each row, filter only the numeric values\r\n      const numericValues = row.filter((cell) => !isNaN(cell) && cell !== \"\");\r\n      numbers = numbers.concat(numericValues.map((val) => parseFloat(val)));\r\n    }\r\n\r\n    return numbers;\r\n  }\r\n\r\n  // const handleFileUpload = async (event) => {\r\n  //   const file = event.target.files[0];\r\n  //   if (file) {\r\n  //     const rawData = await DragDrop(file);\r\n  //     const numericData = extractNumericData(rawData);\r\n  //     setData(numericData);\r\n  //   }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <DragDrop type=\"file\" onChange={handleFileUpload} />\r\n      <Histogram data={data} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}