{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\Benford's_Law\\\\Benford-s-Law\\\\src\\\\components\\\\DnD.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DragAndDropUpload() {\n  _s();\n  const [dragging, setDragging] = useState(false);\n  const [files, setFiles] = useState([]);\n  const [data, setData] = useState([]); // New state for the extracted numeric data\n\n  const handleDragEnter = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragging(true);\n  };\n  const handleDragLeave = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragging(false);\n  };\n  const handleDragOver = e => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n  const handleDrop = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragging(false);\n    let droppedFiles = e.dataTransfer.files;\n    if (droppedFiles && droppedFiles.length > 0) {\n      setFiles(prev => [...prev, ...droppedFiles]);\n      e.dataTransfer.clearData();\n      handleFileUpload({\n        target: {\n          files: droppedFiles\n        }\n      }); // Call handleFileUpload\n    }\n  };\n\n  const readExcelData = file => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = event => {\n        const data = event.target.result;\n        const workbook = XLSX.read(data, {\n          type: 'binary'\n        });\n        const firstSheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[firstSheetName];\n        const rawData = XLSX.utils.sheet_to_json(worksheet);\n        resolve(rawData);\n      };\n      reader.onerror = error => reject(error);\n      reader.readAsBinaryString(file);\n    });\n  };\n  const extractNumericData = rawData => {\n    return rawData.map(row => {\n      let numericRow = {};\n      for (let key in row) {\n        if (!isNaN(row[key])) {\n          numericRow[key] = row[key];\n        }\n      }\n      return numericRow;\n    });\n  };\n  const handleFileUpload = async event => {\n    const file = event.target.files[0];\n    if (file) {\n      const rawData = await readExcelData(file);\n      const numericData = extractNumericData(rawData);\n      setData(numericData);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onDragEnter: handleDragEnter,\n    onDragLeave: handleDragLeave,\n    onDragOver: handleDragOver,\n    onDrop: handleDrop,\n    style: {\n      border: '2px dashed gray',\n      height: '200px',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      background: dragging ? '#e8e8e8' : 'white'\n    },\n    children: [dragging ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Drop your files here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 16\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Drag and drop files here or click to select\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 46\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      multiple: true,\n      style: {\n        display: 'none'\n      },\n      onChange: handleFileUpload // Use the handleFileUpload for the input change as well\n      ,\n      ref: inputRef => inputRef && (inputRef.onclick = e => {\n        e.stopPropagation();\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 3\n  }, this);\n}\n_s(DragAndDropUpload, \"3/o/4PfZUDvTtMjEFiI9etf4UFQ=\");\n_c = DragAndDropUpload;\nexport default DragAndDropUpload;\nvar _c;\n$RefreshReg$(_c, \"DragAndDropUpload\");","map":{"version":3,"names":["React","useState","XLSX","jsxDEV","_jsxDEV","DragAndDropUpload","_s","dragging","setDragging","files","setFiles","data","setData","handleDragEnter","e","preventDefault","stopPropagation","handleDragLeave","handleDragOver","handleDrop","droppedFiles","dataTransfer","length","prev","clearData","handleFileUpload","target","readExcelData","file","Promise","resolve","reject","reader","FileReader","onload","event","result","workbook","read","type","firstSheetName","SheetNames","worksheet","Sheets","rawData","utils","sheet_to_json","onerror","error","readAsBinaryString","extractNumericData","map","row","numericRow","key","isNaN","numericData","onDragEnter","onDragLeave","onDragOver","onDrop","style","border","height","display","alignItems","justifyContent","background","children","fileName","_jsxFileName","lineNumber","columnNumber","multiple","onChange","ref","inputRef","onclick","_c","$RefreshReg$"],"sources":["E:/Projects/Benford's_Law/Benford-s-Law/src/components/DnD.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport * as XLSX from 'xlsx';\r\n\r\nfunction DragAndDropUpload() {\r\n\tconst [dragging, setDragging] = useState(false);\r\n\tconst [files, setFiles] = useState([]);\r\n\tconst [data, setData] = useState([]);  // New state for the extracted numeric data\r\n\r\n\tconst handleDragEnter = (e) => {\r\n\t\te.preventDefault();\r\n\t\te.stopPropagation();\r\n\t\tsetDragging(true);\r\n\t};\r\n\r\n\tconst handleDragLeave = (e) => {\r\n\t\te.preventDefault();\r\n\t\te.stopPropagation();\r\n\t\tsetDragging(false);\r\n\t};\r\n\r\n\tconst handleDragOver = (e) => {\r\n\t\te.preventDefault();\r\n\t\te.stopPropagation();\r\n\t};\r\n\r\n\tconst handleDrop = (e) => {\r\n\t\te.preventDefault();\r\n\t\te.stopPropagation();\r\n\t\tsetDragging(false);\r\n\t\tlet droppedFiles = e.dataTransfer.files;\r\n\t\tif (droppedFiles && droppedFiles.length > 0) {\r\n\t\t\tsetFiles(prev => [...prev, ...droppedFiles]);\r\n\t\t\te.dataTransfer.clearData();\r\n\t\t\thandleFileUpload({ target: { files: droppedFiles } }); // Call handleFileUpload\r\n\t\t}\r\n\t};\r\n\r\n\tconst readExcelData = (file) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst reader = new FileReader();\r\n\t\t\treader.onload = (event) => {\r\n\t\t\t\tconst data = event.target.result;\r\n\t\t\t\tconst workbook = XLSX.read(data, {\r\n\t\t\t\t\ttype: 'binary',\r\n\t\t\t\t});\r\n\t\t\t\tconst firstSheetName = workbook.SheetNames[0];\r\n\t\t\t\tconst worksheet = workbook.Sheets[firstSheetName];\r\n\t\t\t\tconst rawData = XLSX.utils.sheet_to_json(worksheet);\r\n\t\t\t\tresolve(rawData);\r\n\t\t\t};\r\n\t\t\treader.onerror = (error) => reject(error);\r\n\t\t\treader.readAsBinaryString(file);\r\n\t\t});\r\n\t};\r\n\r\n\tconst extractNumericData = (rawData) => {\r\n\t\treturn rawData.map(row => {\r\n\t\t\tlet numericRow = {};\r\n\t\t\tfor (let key in row) {\r\n\t\t\t\tif (!isNaN(row[key])) {\r\n\t\t\t\t\tnumericRow[key] = row[key];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn numericRow;\r\n\t\t});\r\n\t};\r\n\r\n\tconst handleFileUpload = async (event) => {\r\n\t\tconst file = event.target.files[0];\r\n\t\tif (file) {\r\n\t\t\tconst rawData = await readExcelData(file);\r\n\t\t\tconst numericData = extractNumericData(rawData);\r\n\t\t\tsetData(numericData);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tonDragEnter={handleDragEnter}\r\n\t\t\tonDragLeave={handleDragLeave}\r\n\t\t\tonDragOver={handleDragOver}\r\n\t\t\tonDrop={handleDrop}\r\n\t\t\tstyle={{\r\n\t\t\t\tborder: '2px dashed gray',\r\n\t\t\t\theight: '200px',\r\n\t\t\t\tdisplay: 'flex',\r\n\t\t\t\talignItems: 'center',\r\n\t\t\t\tjustifyContent: 'center',\r\n\t\t\t\tbackground: dragging ? '#e8e8e8' : 'white'\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{dragging ? <p>Drop your files here</p> : <p>Drag and drop files here or click to select</p>}\r\n\t\t\t<input\r\n\t\t\t\ttype=\"file\"\r\n\t\t\t\tmultiple\r\n\t\t\t\tstyle={{ display: 'none' }}\r\n\t\t\t\tonChange={handleFileUpload} // Use the handleFileUpload for the input change as well\r\n\t\t\t\tref={inputRef => inputRef && (inputRef.onclick = (e) => { e.stopPropagation(); })}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default DragAndDropUpload;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}