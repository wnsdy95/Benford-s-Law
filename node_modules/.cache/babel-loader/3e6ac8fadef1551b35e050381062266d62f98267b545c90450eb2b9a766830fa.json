{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\Benford's_Law\\\\Benford-s-Law\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"./DnD.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport Papa from \"papaparse\";\nimport Histogram from \"./components/Histogram\";\nimport DnD from \"./components/DnD\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  function readExcelData(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = event => {\n        const data = event.target.result;\n        const workbook = XLSX.read(data, {\n          type: \"binary\"\n        });\n        const firstSheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[firstSheetName];\n        const csvData = XLSX.utils.sheet_to_csv(worksheet);\n        Papa.parse(csvData, {\n          complete: results => resolve(results.data),\n          error: error => reject(error)\n        });\n      };\n      reader.onerror = error => reject(error);\n      reader.readAsBinaryString(file);\n    });\n  }\n  const [data, setData] = useState([]);\n  function extractNumericData(rawData) {\n    // Filter rows that have numeric data.\n    const numericRows = rawData.slice(4, 19); // Based on the given data, adjust if necessary\n\n    let numbers = [];\n    for (const row of numericRows) {\n      // For each row, filter only the numeric values\n      const numericValues = row.filter(cell => !isNaN(cell) && cell !== \"\");\n      numbers = numbers.concat(numericValues.map(val => parseFloat(val)));\n    }\n    return numbers;\n  }\n  const handleFileUpload = async event => {\n    const file = event.target.files[0];\n    if (file) {\n      const rawData = await readExcelData(file);\n      const numericData = extractNumericData(rawData);\n      setData(numericData);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: handleFileUpload,\n      type: \"file\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Histogram, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hhQqYsxLIv1exGOzUvDGOVv6fXw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","React","useState","useEffect","useRef","XLSX","Papa","Histogram","DnD","jsxDEV","_jsxDEV","App","_s","readExcelData","file","Promise","resolve","reject","reader","FileReader","onload","event","data","target","result","workbook","read","type","firstSheetName","SheetNames","worksheet","Sheets","csvData","utils","sheet_to_csv","parse","complete","results","error","onerror","readAsBinaryString","setData","extractNumericData","rawData","numericRows","slice","numbers","row","numericValues","filter","cell","isNaN","concat","map","val","parseFloat","handleFileUpload","files","numericData","className","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Projects/Benford's_Law/Benford-s-Law/src/App.js"],"sourcesContent":["import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport \"./DnD.css\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\nimport Papa from \"papaparse\";\r\nimport Histogram from \"./components/Histogram\";\r\nimport DnD from \"./components/DnD\"\r\n\r\nfunction App() {\r\n  function readExcelData(file) {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = (event) => {\r\n        const data = event.target.result;\r\n        const workbook = XLSX.read(data, { type: \"binary\" });\r\n        const firstSheetName = workbook.SheetNames[0];\r\n        const worksheet = workbook.Sheets[firstSheetName];\r\n        const csvData = XLSX.utils.sheet_to_csv(worksheet);\r\n\r\n        Papa.parse(csvData, {\r\n          complete: (results) => resolve(results.data),\r\n          error: (error) => reject(error),\r\n        });\r\n      };\r\n      reader.onerror = (error) => reject(error);\r\n      reader.readAsBinaryString(file);\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  function extractNumericData(rawData) {\r\n    // Filter rows that have numeric data.\r\n    const numericRows = rawData.slice(4, 19); // Based on the given data, adjust if necessary\r\n\r\n    let numbers = [];\r\n\r\n    for (const row of numericRows) {\r\n      // For each row, filter only the numeric values\r\n      const numericValues = row.filter((cell) => !isNaN(cell) && cell !== \"\");\r\n      numbers = numbers.concat(numericValues.map((val) => parseFloat(val)));\r\n    }\r\n\r\n    return numbers;\r\n  }\r\n\r\n  const handleFileUpload = async (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      const rawData = await readExcelData(file);\r\n      const numericData = extractNumericData(rawData);\r\n      setData(numericData);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <input onChange={handleFileUpload} type={\"file\"}/>\r\n      <Histogram data={data} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}