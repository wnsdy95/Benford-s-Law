{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\Benford's_Law\\\\Benford-s-Law\\\\src\\\\App.js\",\n  _s2 = $RefreshSig$();\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport Papa from \"papaparse\";\nimport Histogram from \"./components/Histogram\";\nimport { FileUploader } from \"react-drag-drop-files\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fileTypes = [\"XLSX\"];\nfunction App() {\n  _s2();\n  var _s = $RefreshSig$();\n  function DragDrop() {\n    _s();\n    const [file, setFile] = useState(null);\n    const handleChange = file => {\n      setFile(file);\n    };\n    return /*#__PURE__*/_jsxDEV(FileUploader, {\n      handleChange: handleChange,\n      name: \"file\",\n      types: fileTypes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this);\n  }\n\n  //   return new Promise((resolve, reject) => {\n  //     const reader = new FileReader();\n  //     reader.onload = (event) => {\n  //       const data = event.target.result;\n  //       const workbook = XLSX.read(data, { type: \"binary\" });\n  //       const firstSheetName = workbook.SheetNames[0];\n  //       const worksheet = workbook.Sheets[firstSheetName];\n  //       const csvData = XLSX.utils.sheet_to_csv(worksheet);\n  //\n  //       Papa.parse(csvData, {\n  //         complete: (results) => resolve(results.data),\n  //         error: (error) => reject(error),\n  //       });\n  //     };\n  //     reader.onerror = (error) => reject(error);\n  //     reader.readAsBinaryString(file);\n  //   });\n  // }\n  _s(DragDrop, \"Nkb8eHkBruGouXteoqeZ1R6wRVk=\");\n  const [data, setData] = useState([]);\n  function extractNumericData(rawData) {\n    // Filter rows that have numeric data.\n    const numericRows = rawData.slice(4, 19); // Based on the given data, adjust if necessary\n\n    let numbers = [];\n    for (const row of numericRows) {\n      // For each row, filter only the numeric values\n      const numericValues = row.filter(cell => !isNaN(cell) && cell !== \"\");\n      numbers = numbers.concat(numericValues.map(val => parseFloat(val)));\n    }\n    return numbers;\n  }\n  const handleFileUpload = async event => {\n    const file = event.target.files[0];\n    if (file) {\n      const rawData = await DragDrop(file);\n      const numericData = extractNumericData(rawData);\n      setData(numericData);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Histogram, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"hhQqYsxLIv1exGOzUvDGOVv6fXw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","React","useState","useEffect","useRef","XLSX","Papa","Histogram","FileUploader","jsxDEV","_jsxDEV","fileTypes","App","_s2","_s","$RefreshSig$","DragDrop","file","setFile","handleChange","name","types","fileName","_jsxFileName","lineNumber","columnNumber","data","setData","extractNumericData","rawData","numericRows","slice","numbers","row","numericValues","filter","cell","isNaN","concat","map","val","parseFloat","handleFileUpload","event","target","files","numericData","className","children","type","onChange","_c","$RefreshReg$"],"sources":["E:/Projects/Benford's_Law/Benford-s-Law/src/App.js"],"sourcesContent":["import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\nimport Papa from \"papaparse\";\r\nimport Histogram from \"./components/Histogram\";\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\nconst fileTypes = [\"XLSX\"];\r\nfunction App() {\r\n  function DragDrop() {\r\n    const [file, setFile] = useState(null);\r\n    const handleChange = (file) => {\r\n      setFile(file);\r\n    };\r\n    return (\r\n        <FileUploader handleChange={handleChange} name=\"file\" types={fileTypes} />\r\n    );\r\n  }\r\n\r\n  //   return new Promise((resolve, reject) => {\r\n  //     const reader = new FileReader();\r\n  //     reader.onload = (event) => {\r\n  //       const data = event.target.result;\r\n  //       const workbook = XLSX.read(data, { type: \"binary\" });\r\n  //       const firstSheetName = workbook.SheetNames[0];\r\n  //       const worksheet = workbook.Sheets[firstSheetName];\r\n  //       const csvData = XLSX.utils.sheet_to_csv(worksheet);\r\n  //\r\n  //       Papa.parse(csvData, {\r\n  //         complete: (results) => resolve(results.data),\r\n  //         error: (error) => reject(error),\r\n  //       });\r\n  //     };\r\n  //     reader.onerror = (error) => reject(error);\r\n  //     reader.readAsBinaryString(file);\r\n  //   });\r\n  // }\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  function extractNumericData(rawData) {\r\n    // Filter rows that have numeric data.\r\n    const numericRows = rawData.slice(4, 19); // Based on the given data, adjust if necessary\r\n\r\n    let numbers = [];\r\n\r\n    for (const row of numericRows) {\r\n      // For each row, filter only the numeric values\r\n      const numericValues = row.filter((cell) => !isNaN(cell) && cell !== \"\");\r\n      numbers = numbers.concat(numericValues.map((val) => parseFloat(val)));\r\n    }\r\n\r\n    return numbers;\r\n  }\r\n\r\n  const handleFileUpload = async (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      const rawData = await DragDrop(file);\r\n      const numericData = extractNumericData(rawData);\r\n      setData(numericData);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <input type=\"file\" onChange={handleFileUpload} />\r\n      <Histogram data={data} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}